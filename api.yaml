openapi: 3.0.0
info:
  title: Nidus
  description: Home Automation and Monitoring
  contact:
    name: Alexandre Lamberty
    url: alexandrelamberty.com
    email: mail@alexandrelamberty.com
  license:
    name: MIT License
    url: "https://opensource.org/licenses/MIT"
  version: 0.0.1
servers:
  - url: "https://dev.api.nidus.lan"
    description: Development server
  - url: "https://staging.api.nidus.lan"
    description: Staging server
  - url: "http://api.nidus.lan"
    description: Production server
paths:
  /devices/pair:
    post:
      summary: Pair Device
      tags:
        - devices
      operationId: post-devices-pair
      responses:
        "200":
          description: OK
      requestBody:
        $ref: "#/components/requestBodies/PairDevice"
      description: Pair a device
  /devices:
    get:
      summary: List Devices
      tags:
        - devices
      responses:
        "200":
          $ref: "#/components/responses/ListDevicesSuccess"
      operationId: get-devices
      description: Return a list of device
      parameters:
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
        - schema:
            type: string
          in: query
          name: mac
          description: Mac
        - schema:
            type: string
          in: query
          name: zoneId
          description: Mac
    parameters: []
    post:
      summary: Create Device
      tags:
        - devices
      operationId: create-device
      responses:
        "200":
          $ref: "#/components/responses/ListDevicesSuccess"
      description: Create a device
      requestBody:
        $ref: "#/components/requestBodies/CreateDevice"
  "/devices/{deviceId}":
    parameters:
      - $ref: "#/components/parameters/deviceId"
    get:
      summary: Get Device
      tags:
        - devices
      responses:
        "200":
          $ref: "#/components/responses/GetDeviceSuccess"
      operationId: get-device
      description: Return device based on his id
    delete:
      summary: Delete Device
      tags:
        - devices
      operationId: delete-device
      responses:
        "200":
          $ref: "#/components/responses/DeleteDeviceSuccess"
      description: Delete device based on his id
    patch:
      summary: Patch Device
      operationId: update-device
      tags:
        - devices
      responses:
        "200":
          description: OK
      description: Update an existing device based on hids id
      requestBody:
        $ref: "#/components/requestBodies/UpdateDevice"
  /zones:
    get:
      summary: List Zones
      tags:
        - zones
      responses:
        "200":
          $ref: "#/components/responses/ListZonesSuccess"
      operationId: get-zones
      description: Return a list of zone
    post:
      summary: Create Zone
      tags:
        - zones
      operationId: post-zone
      responses:
        "200":
          $ref: "#/components/responses/CreateZoneSuccess"
      description: Create a zone
      requestBody:
        $ref: "#/components/requestBodies/CreateZone"
  "/zones/{zoneId}":
    parameters:
      - $ref: "#/components/parameters/zoneId"
    get:
      summary: Get Zone By ID
      tags:
        - zones
      responses:
        "200":
          $ref: "#/components/responses/GetZoneSuccess"
      operationId: get-zone
      description: Return a zone based on his id
      requestBody:
        $ref: "#/components/requestBodies/UpdateZone"
    delete:
      summary: Delete Zone By Id
      description: Delete a zone based on ID
      tags:
        - zones
      operationId: delete-zone-zoneId
      responses:
        "200":
          description: OK
    patch:
      summary: Patch Zone By Id
      operationId: patch-zone-zoneId
      tags:
        - zones
      responses:
        "200":
          description: OK
      description: Patch a zone based on ID
  /capabilities:
    get:
      summary: List Capabilities
      tags:
        - capabilities
      responses:
        "200":
          $ref: "#/components/responses/ListCapabilitiesSuccess"
      operationId: get-capabilities
    post:
      summary: Create Capability
      tags:
        - capabilities
      operationId: post-capabilities
      responses:
        "200":
          description: OK
      requestBody:
        $ref: "#/components/requestBodies/CreateCapability"
  "/capabilities/{capabilityId}":
    get:
      summary: Get Capability
      tags:
        - capabilities
      responses: {}
      operationId: get-capability
    parameters:
      - schema:
          type: string
        name: capabilityId
        in: path
        required: true
    patch:
      summary: Patch Capability
      operationId: patch-capabilities-capabilityId
      tags:
        - capabilities
      responses:
        "200":
          description: OK
    delete:
      summary: Delete Capability
      tags:
        - capabilities
      operationId: delete-capabilities-capabilityId
      responses:
        "200":
          description: OK
  /measurements:
    get:
      summary: List Measurements
      tags:
        - measurements
      responses:
        "200":
          description: OK
      operationId: get-measurements
      parameters:
        - schema:
            type: string
          in: query
    post:
      summary: Create Measurement
      tags:
        - measurements
      operationId: post-measurements
      responses:
        "200":
          description: OK
      requestBody:
        $ref: "#/components/requestBodies/CreateMeasurement"
  /network/scan:
    get:
      summary: Scan Network
      tags:
        - network
      responses: {}
      operationId: get-network-scan
    parameters: []
  /messaging:
    get:
      summary: List Messages
      tags:
        - messaging
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
      operationId: get-messages
      parameters:
        - schema:
            type: string
          in: query
          name: topic
    parameters: []
    post:
      summary: Publish Message
      tags:
        - messaging
      operationId: post-messaging
      responses:
        "200":
          description: OK
  /messaging/topics:
    get:
      summary: List Topics
      tags:
        - messaging
      responses: {}
      operationId: get-message-topics
    parameters: []
components:
  schemas:
    Device:
      title: Device
      description: A device represent an IoT with wireless capacities amongst others
      type: object
      properties:
        id:
          type: string
          description: A unique MongoDB ObjectId
          example: 5349b4ddd2781d08c09
          readOnly: true
        name:
          type: string
        mac:
          type: string
          description: The mac address of the device
          example: "00:00:5e:00:53:af"
        ip:
          type: string
          format: ipv4
        capabilities:
          type: array
          description: The capabilities of the device
          items:
            $ref: "#/components/schemas/Capability"
        zone:
          $ref: "#/components/schemas/Zone"
      required:
        - id
        - name
        - mac
        - ip
    Zone:
      title: Zone
      description: A zone where a device is located
      type: object
      properties:
        id:
          type: string
          description: The id of the zone
          example: 5349b4ddd2781d08c09890f3
        name:
          type: string
          description: The name of the zone
          example: Kitchen
    Capability:
      title: Capability
      description: A capability of a device
      type: object
      properties:
        id:
          type: integer
          description: The id of the capabality
          example: 1
        type:
          type: string
          enum:
            - sensor
            - controller
          example: controller
        kind:
          type: string
          example: temperature
      required:
        - id
    Message:
      title: Message
      x-stoplight:
        id: monvoqrkjv1uc
      type: object
      properties:
        id:
          type: string
        topic:
          $ref: "#/components/schemas/Topic"
        text:
          type: string
    Topic:
      title: Topic
      x-stoplight:
        id: kzu3xalaa2aen
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Measurements:
      title: Measurements
      x-stoplight:
        id: jpfwggy3p1u0q
      type: object
      properties:
        id:
          type: string
          format: uuid
        device:
          $ref: "#/components/schemas/Device"
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        type:
          type: string
          example: temperature
        measurements:
          $ref: "#/components/schemas/Measurement"
        transaction_count:
          type: number
        sum:
          type: number
    Measurement:
      title: Mesurement
      x-stoplight:
        id: rqb7tuxa2oaj1
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: string
  requestBodies:
    CreateDevice:
      content:
        application/json:
          schema:
            type: object
            properties:
              "":
                type: string
                minLength: 1
                maxLength: 80
            required:
              - ""
          examples:
            Create a new device:
              value:
                name: Temp & Humidity
                zone:
                  id: 1
                  name: Kitchen
      description: Device to create
    CreateZone:
      content:
        application/json:
          schema:
            type: object
            properties:
              "":
                type: string
            required:
              - ""
          examples:
            Create a new zone:
              value:
                name: Kitchen
      description: Zone to create
    UpdateDevice:
      content:
        application/json:
          schema:
            type: object
            properties:
              "":
                type: string
              mac:
                type: string
              zone:
                $ref: "#/components/schemas/Zone"
          examples:
            Update device name:
              value:
                name: Temp and Sensor
            Update device zone:
              value:
                zone:
                  id: zezae
                  name: Kitchen
    UpdateZone:
      content:
        application/json:
          schema:
            type: object
            properties:
              "":
                type: string
          examples:
            Upodate zone name:
              value:
                name: Living room
    CreateMeasurement:
      content:
        application/json:
          schema:
            type: object
            properties:
              device_id:
                type: string
                format: uuid
              timestamp:
                type: string
                format: date-time
              value:
                type: number
                example: 22
              type:
                type: string
                example: temperature
            required:
              - device_id
              - timestamp
              - value
              - type
      description: New measurement
    CreateCapability:
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                minLength: 1
                maxLength: 40
              kind:
                type: string
                minLength: 1
                maxLength: 40
            required:
              - type
              - kind
    UpdateCapability:
      content:
        application/json:
          schema:
            type: object
    PairDevice:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                maxLength: 80
                minLength: 1
              mac:
                type: string
                pattern: "^[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}$"
                example: "00:00:5e:00:53:af"
              ip:
                type: string
                format: ipv4
            required:
              - name
              - mac
              - ip
          examples:
            example-1:
              value:
                name: string
                mac: string
                ip: 192.168.0.1
      description: Post request to pair a device
  responses:
    ListZonesSuccess:
      description: A list of zones
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/components/schemas/Zone"
              message:
                type: string
              skip:
                type: string
              limit:
                type: string
              count:
                type: string
          examples:
            A list of zones:
              value:
                - id: azeraz
                  name: Entry
                - id: azer
                  name: Kitchen
                - id: az
                  name: Living room
                - id: azer
                  name: Workshop
    CreateZoneSuccess:
      description: The zone created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Zone"
          examples:
            The zone created:
              value:
                id: sdfg
                name: Kitchen
    CreateDeviceSuccess:
      description: A device object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Device"
          examples:
            The device created:
              value:
                id: 1
                name: Kitchen Temp and Humidity
    ListDevicesSuccess:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Device"
    ErrorResponse:
      description: Details of the error response
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
    GetDeviceSuccess:
      description: Example response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Device"
    DeleteDeviceSuccess:
      description: Delete device response
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
    GetZoneSuccess:
      description: Example response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Zone"
    GetCapabilitySuccess:
      description: Example response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Capability"
    CreateCapabilitySuccess:
      description: Example response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Capability"
    ListMeasurementsSuccess:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Measurements"
              skip:
                type: string
    ListCapabilitiesSuccess:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Capability"
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: string
      description: Max records to return
    skip:
      name: skip
      in: query
      required: false
      schema:
        type: string
      description: Number of items to skip
    deviceId:
      name: deviceId
      in: path
      required: true
      schema:
        type: integer
      description: The device identification
    zoneId:
      name: zoneId
      in: path
      required: true
      schema:
        type: integer
      description: The zone identification
    start_date:
      name: start_date
      in: query
      required: false
      schema:
        type: string
    end_date:
      name: end_date
      in: query
      required: false
      schema:
        type: string
  securitySchemes:
    API Key - 1:
      name: key
      type: apiKey
      in: header
tags:
  - name: devices
    description: Devices
  - name: zones
    description: Zones
  - name: capabilities
    description: Capabilities
  - name: network
    description: Network
  - name: messaging
    description: Messaging
security:
  - API Key - 1: []
