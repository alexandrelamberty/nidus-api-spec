openapi: 3.0.2
info:
  title: Nidus
  description: Home Automation and Monitoring API
  contact:
    name: Alexandre Lamberty
    url: alexandrelamberty.com
    email: mail@alexandrelamberty.com
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'
  version: 0.0.1
servers:
  - url: 'https://dev.api.nidus.lan'
    description: Development server
  - url: 'https://staging.api.nidus.lan'
    description: Staging server
  - url: 'http://api.nidus.lan'
    description: Production server
tags:
  - name: Capabilities
    description: Operations related to device capabilities
  - name: Devices
    description: Operations related to devices
  - name: Measurements
    description: Operations related to measurements
  - name: Messaging
    description: Operations related to messaging
  - name: Network
    description: Operations related to network scanning
  - name: Widgets
    description: Operations related to widgets
  - name: Zones
    description: Operations related to zones
paths:
  /devices/pair:
    post:
      summary: Pair a Device
      tags:
        - Devices
      operationId: post-pair-device
      responses:
        '200':
          $ref: '#/components/responses/PairDeviceSuccess'
      requestBody:
        $ref: '#/components/requestBodies/PairDevice'
      description: Initiates the pairing process for a new device.
  /devices:
    get:
      summary: List Devices
      tags:
        - Devices
      responses:
        '200':
          $ref: '#/components/responses/ListDevices'
      operationId: get-devices
      description: Retrieves a list of all devices in the system.
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/zone_id'
        - $ref: '#/components/parameters/capability_id'
  '/devices/{deviceId}':
    parameters:
      - $ref: '#/components/parameters/deviceId'
    get:
      summary: Retrieve a Device
      tags:
        - Devices
      responses:
        '200':
          $ref: '#/components/responses/GetDeviceSuccess'
      operationId: get-device
      description: Retrieve the details about an existing device based on its ID.
    delete:
      summary: Delete a Device
      tags:
        - Devices
      operationId: delete-device
      responses:
        '200':
          $ref: '#/components/responses/DeleteDeviceSuccess'
      description: Delete an existing device based on its ID.
    patch:
      summary: Update a Device
      tags:
        - Devices
      responses:
        '200':
          $ref: '#/components/responses/UpdateDeviceSuccess'
      operationId: update-device
      description: Update the details about an existing device based on its ID.
      requestBody:
        $ref: '#/components/requestBodies/UpdateDevice'
  '/devices/{deviceId}/unpair':
    get:
      summary: Un pair a Device
      tags:
        - Devices
      responses:
        '200':
          $ref: '#/components/responses/UnpairDeviceSuccess'
      operationId: get-devices-unpair
      description: Un pair a device from the system.
    parameters:
      - $ref: '#/components/parameters/deviceId'
  '/devices/{deviceId}/reset':
    get:
      summary: Reset a Device
      tags:
        - Devices
      responses:
        '200':
          $ref: '#/components/responses/ResetDeviceSuccess'
      operationId: get-devices-reset
      description: Reset a device based on its ID.
    parameters:
      - $ref: '#/components/parameters/deviceId'
  /zones:
    get:
      summary: List Zones
      tags:
        - Zones
      responses:
        '200':
          $ref: '#/components/responses/ListZones'
      operationId: get-zones
      description: Retrieve all zones in the system.
    post:
      summary: Create a New Zone
      tags:
        - Zones
      operationId: post-zone
      responses:
        '200':
          $ref: '#/components/responses/CreateZoneSuccess'
      description: Create a new zone.
      requestBody:
        $ref: '#/components/requestBodies/CreateZone'
  '/zones/{zoneId}':
    parameters:
      - $ref: '#/components/parameters/zoneId'
    get:
      summary: Retrieve a Zone
      tags:
        - Zones
      responses:
        '200':
          $ref: '#/components/responses/GetZoneSuccess'
      operationId: get-zone
      description: Retrieve details about a zone based on its ID.
    delete:
      summary: Delete a Zone
      description: Delete a zone based on its ID.
      tags:
        - Zones
      operationId: delete-zone-zoneId
      responses:
        '200':
          $ref: '#/components/responses/DeleteZoneSuccess'
    patch:
      summary: Update a Zone
      operationId: patch-zone-zoneId
      tags:
        - Zones
      responses:
        '200':
          $ref: '#/components/responses/UpdateZoneSuccess'
      description: Update a zone based on ID.
      requestBody:
        $ref: '#/components/requestBodies/UpdateZone'
  /capabilities:
    get:
      summary: List Capabilities
      tags:
        - Capabilities
      responses:
        '200':
          $ref: '#/components/responses/ListCapabilities'
      operationId: get-capabilities
      description: List all capabilities of the system.
    post:
      summary: Create Capability
      tags:
        - Capabilities
      operationId: post-capabilities
      description: Create a new capability.
      responses:
        '200':
          $ref: '#/components/responses/CreateCapabilitySuccess'
      requestBody:
        $ref: '#/components/requestBodies/CreateCapability'
  '/capabilities/{capabilityId}':
    get:
      summary: Retrieve a Capability
      tags:
        - Capabilities
      responses:
        '200':
          $ref: '#/components/responses/GetCapabilitySuccess'
      operationId: get-capability
      description: Retrieve details about a capability.
    parameters:
      - $ref: '#/components/parameters/capabilityId'
    patch:
      summary: Patch Capability
      description: Update a capability.
      operationId: patch-capabilities-capabilityId
      tags:
        - Capabilities
      responses:
        '200':
          $ref: '#/components/responses/UpdateCapabilitySuccess'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCapability'
    delete:
      summary: Delete Capability
      description: Delete a capability.
      tags:
        - Capabilities
      operationId: delete-capabilities-capabilityId
      responses:
        '200':
          $ref: '#/components/responses/DeleteCapabilitySuccess'
  /measurements:
    get:
      summary: List Measurements
      tags:
        - Measurements
      responses:
        '200':
          $ref: '#/components/responses/ListMeasurements'
      operationId: get-measurements
      description: List all measurements from the system.
      parameters:
        - $ref: '#/components/parameters/start_date'
        - $ref: '#/components/parameters/end_date'
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/device_mac'
    post:
      summary: Create a New Measurement
      tags:
        - Measurements
      operationId: post-measurements
      responses:
        '200':
          description: OK
      requestBody:
        $ref: '#/components/requestBodies/CreateMeasurement'
      description: Create a new measurement.
  /network/scan:
    get:
      summary: Scan a Network
      tags:
        - Network
      responses:
        '200':
          $ref: '#/components/responses/ScanNetworkSuccess'
      operationId: get-network-scan
      description: Scan a network interface for devices.
    parameters: []
  /widgets:
    get:
      summary: List Widgets
      tags:
        - Widgets
      responses:
        '200':
          $ref: '#/components/responses/ListWidgets'
      operationId: get-widgets
      description: List all the widgets created by the GUI web application.
      parameters:
        - $ref: '#/components/parameters/device_id'
    post:
      summary: Create a New Widget
      operationId: post-widgets
      tags:
        - Widgets
      responses:
        '200':
          $ref: '#/components/responses/CreateWidgetSuccess'
      description: Create a new widget for GUI web application.
      requestBody:
        $ref: '#/components/requestBodies/CreateWidget'
components:
  schemas:
    Device:
      title: Device
      description: 'Represents an IoT device with wireless capabilities, among others.'
      type: object
      properties:
        id:
          type: string
          description: A unique MongoDB ObjectId
          example: 6335853299432a1a95be1be3
          readOnly: true
        name:
          type: string
        mac:
          type: string
          description: The mac address of the device
          example: '00:00:5e:00:53:af'
        ip:
          type: string
          format: ipv4
        capabilities:
          type: array
          description: The capabilities of the device
          items:
            $ref: '#/components/schemas/Capability'
        zone:
          $ref: '#/components/schemas/Zone'
      required:
        - id
        - name
        - mac
        - ip
    Zone:
      title: Zone
      description: Represents a zone where a device is located.
      type: object
      properties:
        id:
          type: string
          description: The id of the zone
          example: 63358544a6bceb91ad17415f
        name:
          type: string
          description: The name of the zone
          example: Kitchen
    Capability:
      title: Capability
      description: Represents a capability of a device.
      type: object
      properties:
        id:
          type: string
          description: The ID of the capability
          example: 633585577333643474baa760
        type:
          type: string
          enum:
            - sensor
            - controller
          example: controller
        kind:
          type: string
          example: temperature
      required:
        - id
    Measurement:
      title: Measurement
      type: object
      properties:
        id:
          type: string
          example: 6335856fa046bb650f45d9b0
        metadata:
          type: object
          properties:
            device_id:
              type: string
            type:
              type: string
        value:
          type: string
          example: '22'
        timestamp:
          type: string
          format: date-time
      description: Represents a measurement from a device.
    Widget:
      title: Widget
      type: object
      properties:
        id:
          type: string
          example: 633585f76f5705405e25b942
        device_id:
          type: string
          example: 63358601300c55fbd7ab45a4
        capability:
          type: string
          example: sensor/temperature
      description: Represents a widget.
  requestBodies:
    CreateZone:
      content:
        application/json:
          schema:
            type: object
            properties:
              '':
                type: string
              floor:
                type: string
                x-stoplight:
                  id: xqywz4fjj4vve
            required:
              - ''
              - floor
          examples:
            Create a new zone:
              value:
                name: Kitchen
      description: Request body for creating a new zone.
    UpdateDevice:
      content:
        application/json:
          schema:
            type: object
            properties:
              '':
                type: string
              ip:
                type: string
                x-stoplight:
                  id: 36hn8jucby2xa
              zone:
                $ref: '#/components/schemas/Zone'
              capabilities:
                type: array
                x-stoplight:
                  id: xe5097ynjee77
                items:
                  $ref: '#/components/schemas/Capability'
          examples:
            Update device name:
              value:
                name: Temp and Sensor
            Update device zone:
              value:
                zone:
                  id: zezae
                  name: Kitchen
      description: Request body for updating an existing device.
    UpdateZone:
      content:
        application/json:
          schema:
            type: object
            properties:
              '':
                type: string
              floor:
                type: string
                x-stoplight:
                  id: gze3r5j4cl4g2
          examples:
            Upodate zone name:
              value:
                name: Living room
      description: Request body for updating an existing zone.
    CreateMeasurement:
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                type: object
                x-stoplight:
                  id: vh9l33dl1eihu
                required:
                  - device_id
                  - type
                properties:
                  device_id:
                    type: string
                    x-stoplight:
                      id: ym0k3kffmc405
                  type:
                    type: string
                    x-stoplight:
                      id: 84l0gwod8ubh0
              value:
                type: string
                x-stoplight:
                  id: 1nwxpgtdqmroy
              timestamp:
                type: string
                x-stoplight:
                  id: 6a6j59pvr3crf
            required:
              - metadata
              - value
              - timestamp
      description: Request body for creating a new measurement.
    CreateCapability:
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                minLength: 1
                maxLength: 40
                description: 'The capability type ie: sensor, controller'
              kind:
                type: string
                minLength: 1
                maxLength: 40
                description: 'The kind of capability ie: temperature, motion'
            required:
              - type
              - kind
      description: Request body for creating a new capability.
    UpdateCapability:
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                x-stoplight:
                  id: ip67y47my8c08
              kind:
                type: string
                x-stoplight:
                  id: 5psvjjspt8f3b
      description: Request body for creating a new capability.
    PairDevice:
      content:
        application/json:
          schema:
            type: object
            properties:
              mac:
                type: string
                pattern: '^[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}$'
                example: '00:00:5e:00:53:af'
              ip:
                type: string
                format: ipv4
            required:
              - mac
              - ip
      description: Request body for paring a device.
    CreateWidget:
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                x-stoplight:
                  id: odolwse9uayxh
              device_id:
                type: string
                example: 633586d2295c53530860b24d
              capability:
                type: string
                example: sensor/temperature
            required:
              - type
              - device_id
              - capability
      description: Request body for creating a new widget.
  responses:
    ListZones:
      description: Zones successfully listed.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Zone'
      headers: {}
    CreateZoneSuccess:
      description: Zone successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Zone'
          examples:
            The zone created:
              value:
                id: sdfg
                name: Kitchen
    ListDevices:
      description: Devices successfully listed.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Device'
    GetDeviceSuccess:
      description: Device successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Device'
    DeleteDeviceSuccess:
      description: Device successfully deleted.
      content:
        application/json:
          schema:
            type: string
            default: Device successfully deleted.
    GetZoneSuccess:
      description: Zone successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Zone'
    GetCapabilitySuccess:
      description: Capability successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capability'
    CreateCapabilitySuccess:
      description: Capability successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capability'
    ListMeasurements:
      description: Measurements successfully listed.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Measurement'
    ListCapabilities:
      description: Capabilities successfully listed.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Capability'
    ListWidgets:
      description: Widgets successfully listed.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Widget'
    UpdateDeviceSuccess:
      description: Device successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Device'
    UnpairDeviceSuccess:
      description: Device successfully unpaired.
      content:
        application/json:
          schema:
            type: string
            default: Device successfully unpaired.
    ResetDeviceSuccess:
      description: Device reset successfully.
      content:
        application/json:
          schema:
            type: string
            default: Device successfully reseted.
    PairDeviceSuccess:
      description: Device successfully paired.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Device'
    DeleteZoneSuccess:
      description: Zone successfully deleted.
      content:
        application/json:
          schema:
            type: string
            default: Zone successfully deleted.
    DeleteCapabilitySuccess:
      description: Capability successfully deleted.
      content:
        application/json:
          schema:
            type: string
            default: Capability successfully deleted.
    UpdateZoneSuccess:
      description: Zone successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Zone'
    UpdateCapabilitySuccess:
      description: Capability successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capability'
    ScanNetworkSuccess:
      description: Network successfully scanned.
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
    CreateWidgetSuccess:
      description: Widget successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Widget'
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: string
      description: Number of items to return
    skip:
      name: skip
      in: query
      required: false
      schema:
        type: string
      description: Number of items to skip
    deviceId:
      name: deviceId
      in: path
      required: true
      schema:
        type: integer
      description: Device ID
    zoneId:
      name: zoneId
      in: path
      required: true
      schema:
        type: integer
      description: Zone ID
    start_date:
      name: start_date
      description: Start date
      in: query
      required: false
      schema:
        type: string
    end_date:
      name: end_date
      description: End date
      in: query
      required: false
      schema:
        type: string
    capability_id:
      name: capability_id
      in: query
      schema:
        type: string
        example: sensor/temperature
      description: Capability ID
    device_mac:
      name: device_mac
      in: query
      required: false
      schema:
        type: string
      description: Device mac address
    zone_id:
      name: zone_id
      in: query
      required: false
      schema:
        type: string
      description: Zone ID
    device_id:
      name: device_id
      in: query
      schema:
        type: string
      description: Device ID
    capabilityId:
      name: capabilityId
      description: Capability ID
      in: path
      required: true
      schema:
        type: string
  securitySchemes:
    ApiKeyAuth:
      name: PAIRING_KEY
      type: apiKey
      in: header
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
security:
  - ApiKeyAuth: []
  - BearerAuth: []
